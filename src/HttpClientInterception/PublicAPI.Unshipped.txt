JustEat.HttpClientInterception.HttpClientInterceptorOptions.RegisterByteArray(System.Net.Http.HttpMethod method, System.Uri uri, System.Func<System.Threading.Tasks.Task<byte[]>> contentFactory, System.Net.HttpStatusCode statusCode = System.Net.HttpStatusCode.OK, string mediaType = "application/json", System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>> responseHeaders = null, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>> contentHeaders = null, System.Func<System.Net.Http.HttpRequestMessage, System.Threading.Tasks.Task> onIntercepted = null) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions
JustEat.HttpClientInterception.HttpClientInterceptorOptions.RegisterStream(System.Net.Http.HttpMethod method, System.Uri uri, System.Func<System.Threading.Tasks.Task<System.IO.Stream>> contentStream, System.Net.HttpStatusCode statusCode = System.Net.HttpStatusCode.OK, string mediaType = "application/json", System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>> responseHeaders = null, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>> contentHeaders = null, System.Func<System.Net.Http.HttpRequestMessage, System.Threading.Tasks.Task> onIntercepted = null) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.For(System.Func<System.Net.Http.HttpRequestMessage, System.Threading.Tasks.Task<bool>> predicate) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder
JustEat.HttpClientInterception.HttpRequestNotInterceptedException
JustEat.HttpClientInterception.HttpRequestNotInterceptedException.HttpRequestNotInterceptedException() -> void
JustEat.HttpClientInterception.HttpRequestNotInterceptedException.HttpRequestNotInterceptedException(string message) -> void
JustEat.HttpClientInterception.HttpRequestNotInterceptedException.HttpRequestNotInterceptedException(string message, System.Exception innerException) -> void
JustEat.HttpClientInterception.HttpRequestNotInterceptedException.HttpRequestNotInterceptedException(string message, System.Net.Http.HttpRequestMessage request) -> void
JustEat.HttpClientInterception.HttpRequestNotInterceptedException.Request.get -> System.Net.Http.HttpRequestMessage
JustEat.HttpClientInterception.NewtonsoftJsonExtensions
JustEat.HttpClientInterception.SystemTextJsonExtensions
static JustEat.HttpClientInterception.HttpClientInterceptorOptionsExtensions.CreateHttpClient(this JustEat.HttpClientInterception.HttpClientInterceptorOptions options, string baseAddress) -> System.Net.Http.HttpClient
static JustEat.HttpClientInterception.HttpClientInterceptorOptionsExtensions.RegisterByteArray(this JustEat.HttpClientInterception.HttpClientInterceptorOptions options, System.Net.Http.HttpMethod method, System.Uri uri, System.Func<byte[]> contentFactory, System.Net.HttpStatusCode statusCode = System.Net.HttpStatusCode.OK, string mediaType = "application/json", System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> responseHeaders = null) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions
static JustEat.HttpClientInterception.HttpClientInterceptorOptionsExtensions.RegisterGetJson(this JustEat.HttpClientInterception.HttpClientInterceptorOptions options, string uriString, object content, System.Net.HttpStatusCode statusCode = System.Net.HttpStatusCode.OK) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions
static JustEat.HttpClientInterception.HttpClientInterceptorOptionsExtensions.RegisterStream(this JustEat.HttpClientInterception.HttpClientInterceptorOptions options, System.Net.Http.HttpMethod method, System.Uri uri, System.Func<System.IO.Stream> contentStream, System.Net.HttpStatusCode statusCode = System.Net.HttpStatusCode.OK, string mediaType = "application/json", System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> responseHeaders = null) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions
static JustEat.HttpClientInterception.HttpRequestInterceptionBuilderExtensions.WithJsonContent(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder builder, object content) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder
static JustEat.HttpClientInterception.NewtonsoftJsonExtensions.WithNewtonsoftJsonContent(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder builder, object content, Newtonsoft.Json.JsonSerializerSettings settings = null) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder
static JustEat.HttpClientInterception.SystemTextJsonExtensions.WithSystemTextJsonContent(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder builder, object content, System.Text.Json.JsonSerializerOptions options = null) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder
